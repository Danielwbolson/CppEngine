#version 450 compatibility
#extension GL_ARB_compute_shader : enable

#define MAX_LIGHTS_PER_TILE 1023

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D gNormal;
layout (binding = 1) uniform usampler2D gDiffuseSpec;
layout (binding = 2) uniform sampler2D gDepth;

layout (binding = 0) uniform writeonly image2D destTex;

// Used for frustum calculations
uniform mat4 proj;
uniform mat4 view;

// Used for recreation of position from depth
uniform mat4 invProj;
uniform mat4 invView;

// Used for specular lighting
uniform vec3 camPos;
uniform uint numPointLights;

struct PointLightToGPU {
	vec4 position_and_radius;
	vec4 color_and_luminance;
};
layout(std430, binding = 0) readonly buffer PointLights {
	PointLightToGPU pointLights[];
};
// Caching in shared memory to speed up performance
shared PointLightToGPU sharedPointLights[MAX_LIGHTS_PER_TILE];

// each tile supports 1023 unique point lights
struct Tile {
	uint pointLightIndices[MAX_LIGHTS_PER_TILE]; // 1023 point lights supported
	uint numLights;
};
layout(std430, binding = 1) coherent writeonly buffer LightTiles {
	Tile lightTiles[];
};

shared uint minDepth;
shared uint maxDepth;
shared uint numTilePointLights;

vec3 octahedronDecompress(vec3);
vec2 signNotZero(vec2);
vec2 float8x3_to_oct(vec3);
vec3 oct_to_float32x3(vec2);

void main() {

	if (gl_LocalInvocationIndex == 0) {
		minDepth = 0x7f7fffff;
		maxDepth = 0;
		numTilePointLights = 0;
	}

	// position in global shader (texture position)
	ivec2 globalId = ivec2(gl_GlobalInvocationID.xy);
	// This tiles 1-dimensional location
	uint oneDimWorkGroupID = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	ivec2 resolution = imageSize(destTex);
	// UV coordinates to use on our samplers
	vec2 samplerUV = vec2(globalId.x / float(resolution.x), globalId.y / float(resolution.y));

	lightTiles[oneDimWorkGroupID].numLights = 0;

	// Get depth value from texture
	float depthFloat = texture(gDepth, samplerUV).r;
	uint depthInt = uint(depthFloat * float(0x7f7fffff));
	
	// Calculate min/max depth of out work group or tile
	atomicMax(maxDepth, depthInt);
	atomicMin(minDepth, depthInt);

	// We need min/max depth for the tile calculated before continuing
	barrier();

	float f = 1000.0;
    float n = 0.1;

	// Reset our min/max depth values for this tile to floats
	float maxDepthFloat = float(maxDepth) / float(0x7f7fffff);
	float depth_ndc = 2.0 * maxDepthFloat - 1.0f;
	float maxViewDepth = proj[3][2] / (proj[2][2] + depth_ndc);

	float minDepthFloat = float(minDepth) / float(0x7f7fffff);
	depth_ndc = 2.0 * minDepthFloat - 1.0f;
	float minViewDepth = proj[3][2] / (proj[2][2] + depth_ndc);

	// We need to convert our tile's frustum to the correct scale and position
	// We can use gl_WorkGroupSize since our x and y are the same (16x16)
	// TODO: I don't understand why 2 is in the denominator. Makes sense to me to not have it.
	mat4 projView = proj * view;
	vec2 tileScale = resolution * (1.0f / float(2.0f * gl_WorkGroupSize.xy));
	vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

	// Calculate frustum planes
	// Thus, we want to calculate frustum planes using a proj matrix
	/* https://www.digipen.edu/sites/default/files/public/docs/theses/denis-ishmukhametov-master-of-science-in-computer-science-thesis-efficient-tile-based-deferred-shading-pipeline.pdf */

	vec4 col1 = vec4(	
		-proj[0][0] * tileScale.x, 
		0.0f, 
		tileBias.x, 
		0.0f
	);
	vec4 col2 = vec4(
		0.0f, 
		-proj[1][1] * tileScale.y, 
		tileBias.y, 
		0.0f
	);
	vec4 col4 = vec4(
		0.0f, 
		0.0f, 
		-1.0f, 
		0.0f
	);

	vec4 frustumPlanes[6];
	//left
	frustumPlanes[0] = col4 + col1;
	//right
	frustumPlanes[1] = col4 - col1;
	//bottom
	frustumPlanes[2] = col4 - col2;
	//top
	frustumPlanes[3] = col4 + col2;
	//near
//	// Normal is facing incorrect direction. Lights are culled that shouldn't be otherwise. Will move
//	// away from frustum calculations
	frustumPlanes[4] = vec4(0.0f, 0.0f, -1.0f, -minViewDepth); // why negative min depth?
	//far
	frustumPlanes[5] = vec4(0.0f, 0.0f, 1.0f, maxViewDepth);

	// TODO : Should we normalize the frustum planes?
	for(int i = 0; i < 4; i++) {
        frustumPlanes[i] *= 1.0f / length(frustumPlanes[i].xyz);
    }

	// Light culling for this tile
	// Each thread in this block should cull as few lights as possible (distribute evenly)
	uint numThreads = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	uint numPasses = (numPointLights + numThreads - 1) / numThreads;

	for (int i = 0; i < numPasses; i++) {

		// First, verify we still have room for lights
		if (numTilePointLights >= MAX_LIGHTS_PER_TILE) { continue; }

		// Then get our index of this point light, ignoring them if we are out of bounds
		uint index = i * numThreads + gl_LocalInvocationIndex;
		if (index >= numPointLights) { continue; }

		vec4 viewPos = view * vec4(pointLights[index].position_and_radius.xyz, 1.0f);
		float rad = pointLights[index].position_and_radius.w;

		bool inFrustum = true;
		for (int j = 0; j < 6; j++) {
			float dist = dot(frustumPlanes[j].xyz, viewPos.xyz) + frustumPlanes[j].w;
			inFrustum = inFrustum && (dist >= -rad);
		}

		// If all frustums can see a part of this, this light is impacting our tile
		if (inFrustum) {
			// Add our current light to this tiles array of lights
			uint id = atomicAdd(numTilePointLights, 1);

			lightTiles[oneDimWorkGroupID].pointLightIndices[id] = index;
			atomicAdd(lightTiles[oneDimWorkGroupID].numLights, 1);

			sharedPointLights[id] = pointLights[index];
		}

	}

	barrier();

	// At this point, our tile should be filled with all of the point lights it needs
	// Calculate lighting
	vec3 outColor = vec3(0, 0, 0);

	// Don't normalize normal or we will ruin the encoding
	vec3 normal       = octahedronDecompress(texture(gNormal, samplerUV).rgb);
	uvec4 diffuseSpec = texture(gDiffuseSpec, samplerUV);
	
	vec3 diffuseColor; vec3 specularColor;
	
	float z = 2.0 * depthFloat - 1;
	vec4 clipSpacePos = vec4(samplerUV * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePos = invProj * clipSpacePos;
	viewSpacePos /= viewSpacePos.w;
	vec3 fragPos = (invView * viewSpacePos).xyz;

	// eye
	vec3 eye = normalize(camPos-fragPos);

	//outColor = vec3(maxDepthFloat / 100, minDepthFloat / 100, 0);

	// Run through all lights for this tile
	for (int i = 0; i < numTilePointLights; i++) {
		vec3 lightPos = sharedPointLights[i].position_and_radius.xyz;

		// light info in world space
		vec3 lightDir = normalize(lightPos - fragPos);
		float ndotL = max(dot(normal, lightDir), 0.0);
		float dist = length(lightPos - fragPos);
		

		if (ndotL > 0.0 && (dist < sharedPointLights[i].position_and_radius.w)) {

			// diffuse
			diffuseColor.x = float(diffuseSpec.x & 0xFF) / 255.0;
			diffuseColor.y = float(diffuseSpec.y & 0xFF) / 255.0;
			diffuseColor.z = float(diffuseSpec.z & 0xFF) / 255.0;
			vec3 diffuse = sharedPointLights[i].color_and_luminance.xyz * diffuseColor * ndotL;

			// specular
			vec3 h = normalize(lightDir + eye);
			float spec = pow(max(dot(h, normal), 0.0), diffuseSpec.a);

			specularColor.x = float(diffuseSpec.x >> 8) / 255.0;
			specularColor.y = float(diffuseSpec.y >> 8) / 255.0;
			specularColor.z = float(diffuseSpec.z >> 8) / 255.0;
			vec3 specular = specularColor * spec;

			// attenuation
			float attenuation = sharedPointLights[i].color_and_luminance.w / (1 + 1 * dist + 2 * dist * dist);

			outColor += diffuse * attenuation; // diffuse
			outColor += specular * attenuation; // specular

		}
	}

	imageStore(destTex, globalId, vec4(outColor, 1.0));

}

// Decompresses our octahedron encoded normals into a useable float3x32 format
vec3 octahedronDecompress(vec3 v) {
	vec2 oct = float8x3_to_oct(v);
	return oct_to_float32x3(oct);
}

// Returns +- 1
vec2 signNotZero(vec2 v) {
	return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
}

// Convert our rgb texture normal into a octohedron encoded 2x12
vec2 float8x3_to_oct(vec3 v) {
	v *= 255.0;
	v.y *= (1.0 / 16.0);
	vec2 oct = vec2(v.x * 16.0 + floor(v.y), 
					fract(v.y) * (16.0 * 256.0) + v.z);

	return clamp(oct * (1.0 / 2047.0) - 1.0, vec2(-1.0), vec2(1.0));
}

// Converts our 2x12 oct to float 32x3 for use in our lighting calcuations
vec3 oct_to_float32x3(vec2 v) {
	vec3 octVec = vec3(v.xy, 1.0 - abs(v.x) - abs(v.y));
	
	if (octVec.z < 0) {
		octVec.xy = (1.0 - abs(octVec.yx)) * signNotZero(octVec.xy);
	}
	return normalize(octVec);
}